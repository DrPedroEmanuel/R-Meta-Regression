df$time <- format(as.numeric(df$time), nsmall = 10)
# Ensure all survival values are between 0 and 1
#df$survival <- pmin(df$survival, 1)
colnames(df) <- c("Time", "Survival probability","Treatment")
# Write the CSV file for the dataframe
write.csv(df, "IPD/low_surv_df.csv", row.names = FALSE, quote = FALSE)
control_raw <- read_delim("IPD/low_surv_tfcas.csv", delim=";", locale = locale_settings)
treatment_raw <- read_delim("IPD/low_surv_tcar.csv", delim=";", locale = locale_settings)
# Add column names in each dataset
colnames(control_raw) <- c("time", "survival")
colnames(treatment_raw) <- c("time", "survival")
# Replace commas with dots in every dataset
control_raw$time <- gsub(",", ".",control_raw$time)
control_raw$survival <- gsub(",", ".",control_raw$survival)
treatment_raw$survival <- gsub(",", ".",treatment_raw$time)
treatment_raw$time <- gsub(",", ".",treatment_raw$survival)
# Add a column to indicate the group
control_raw$group <- 1
treatment_raw$group <- 2
# Combine the data frames
df <- rbind(control_raw, treatment_raw)
control_raw <- read_delim("IPD/low_surv_tfcas.csv", delim=";", locale = locale_settings)
treatment_raw <- read_delim("IPD/low_surv_tcar.csv", delim=";", locale = locale_settings)
# Add column names in each dataset
colnames(control_raw) <- c("time", "survival")
colnames(treatment_raw) <- c("time", "survival")
# Replace commas with dots in every dataset
control_raw$time <- gsub(",", ".",control_raw$time)
control_raw$survival <- gsub(",", ".",control_raw$survival)
treatment_raw$survival <- gsub(",", ".",treatment_raw$time)
treatment_raw$time <- gsub(",", ".",treatment_raw$survival)
# Add a column to indicate the group
control_raw$group <- 1
treatment_raw$group <- 2
# Add column names in each dataset
colnames(control_raw) <- c("time", "survival")
colnames(treatment_raw) <- c("time", "survival")
treatment_raw <- read_delim("IPD/low_surv_tcar.csv", delim=";", locale = locale_settings)
control_raw <- read_delim("IPD/low_surv_tfcas.csv", delim=";", locale = locale_settings)
treatment_raw <- read_delim("IPD/low_surv_tcar.csv", delim=";", locale = locale_settings)
# Add column names in each dataset
colnames(control_raw) <- c("time", "survival")
colnames(treatment_raw) <- c("time", "survival")
control_raw$time <- gsub(",", ".",control_raw$time)
control_raw$survival <- gsub(",", ".",control_raw$survival)
treatment_raw$time <- gsub(",", ".",treatment_raw$survival)
treatment_raw$survival <- gsub(",", ".",treatment_raw$time)
treatment_raw <- read_delim("IPD/low_surv_tcar.csv", delim=";", locale = locale_settings)
colnames(treatment_raw) <- c("time", "survival")
control_raw <- read_delim("IPD/low_surv_tfcas.csv", delim=";", locale = locale_settings)
treatment_raw <- read_delim("IPD/low_surv_tcar.csv", delim=";", locale = locale_settings)
# Add column names in each dataset
colnames(control_raw) <- c("time", "survival")
colnames(treatment_raw) <- c("time", "survival")
treatment_raw$time <- gsub(",", ".",treatment_raw$survival)
# Replace commas with dots in every dataset
control_raw$time <- gsub(",", ".",control_raw$time)
control_raw$survival <- gsub(",", ".",control_raw$survival)
treatment_raw$time <- gsub(",", ".",treatment_raw$time)
treatment_raw$survival <- gsub(",", ".",treatment_raw$survival)
control_raw <- read_delim("IPD/low_surv_tfcas.csv", delim=";", locale = locale_settings)
treatment_raw <- read_delim("IPD/low_surv_tcar.csv", delim=";", locale = locale_settings)
# Add column names in each dataset
colnames(control_raw) <- c("time", "survival")
colnames(treatment_raw) <- c("time", "survival")
treatm
# Combine the data frames
df <- rbind(treatment_raw, control_raw)
# Format the numbers to have 10 decimal places
df$survival <- format(as.numeric(df$survival), nsmall = 10)
df$time <- format(as.numeric(df$time), nsmall = 10)
# Ensure all survival values are between 0 and 1
#df$survival <- pmin(df$survival, 1)
colnames(df) <- c("Time", "Survival probability","Treatment")
# Write the CSV file for the dataframe
write.csv(df, "IPD/low_surv_df.csv", row.names = FALSE, quote = FALSE)
# Add a column to indicate the group
control_raw$group <- 2
treatment_raw$group <- 1
# Combine the data frames
df <- rbind(treatment_raw, control_raw)
# Read the CSV files with ; separator
control_raw <- read_delim("IPD/low_surv_tfcas.csv", delim=";", locale = locale_settings)
treatment_raw <- read_delim("IPD/low_surv_tcar.csv", delim=";", locale = locale_settings)
# Add column names in each dataset
colnames(control_raw) <- c("time", "survival")
colnames(treatment_raw) <- c("time", "survival")
treatm
# Read the CSV files with ; separator
control_raw <- read_delim("IPD/low_surv_tfcas.csv", delim=";", locale = locale_settings)
treatment_raw <- read_delim("IPD/low_surv_tcar.csv", delim=";", locale = locale_settings)
# Add column names in each dataset
colnames(control_raw) <- c("time", "survival")
colnames(treatment_raw) <- c("time", "survival")
# Replace commas with dots in every dataset
control_raw$time <- gsub(",", ".",control_raw$time)
control_raw$survival <- gsub(",", ".",control_raw$survival)
treatment_raw$time <- gsub(",", ".",treatment_raw$time)
treatment_raw$survival <- gsub(",", ".",treatment_raw$survival)
# Add a column to indicate the group
control_raw$group <- 2
treatment_raw$group <- 1
# Combine the data frames
df <- rbind(treatment_raw, control_raw)
# Format the numbers to have 10 decimal places
df$survival <- format(as.numeric(df$survival), nsmall = 10)
df$time <- format(as.numeric(df$time), nsmall = 10)
# Ensure all survival values are between 0 and 1
#df$survival <- pmin(df$survival, 1)
colnames(df) <- c("Time", "Survival probability","Treatment")
# Write the CSV file for the dataframe
write.csv(df, "IPD/low_surv_df.csv", row.names = FALSE, quote = FALSE)
# Submit data to shiny app, then get the CSV, clean it in Notepad++, then read it
ipd <- read_csv("IPD/low_surv_ipd.csv")
# Rename the columns
colnames(ipd) <- c("time", "status", "group")
# Fit the Cox proportional hazards model
cox_model <- coxph(Surv(time, status) ~ group, data = ipd)
hr <- summary(cox_model)$coefficients[1, "exp(coef)"]
hr_confint <- summary(cox_model)$conf.int[1, ]
hr_text <- paste0("HR: ", round(hr, 2), " (95% CI: ",
round(hr_confint["lower .95"], 2), "-",
round(hr_confint["upper .95"], 2), ")")
# Display the results
summary(cox_model)
######################### PRINT THE PLOT #######################################
# Fit a Kaplan-Meier survival curve
fit <- survfit(Surv(ipd$time, ipd$status) ~ group, data = ipd)
# Plot the survival curves
p <- ggsurvplot(fit, data = ipd, pval = TRUE, conf.int = TRUE,
risk.table = TRUE, legend.labs = c("SAB", "NAB + eNAB"),
ggtheme = theme_minimal(), xlim = c(0, 72),
xlab = "Time in Months", break.x.by = 12, break.y.by =0.2,
palette=c("blue", "red"), conf.int.style = "step", conf.int.alpha=0,
title = "Bianchini20 Freedom From Reintervention")
# Add the HR annotation
p$plot <- p$plot + annotate("text", x = 36, y = 0.1, label = hr_text, size = 5, hjust = 0)
# Print the plot
print(p)
fit <- survfit(Surv(ipd$time, ipd$status) ~ group, data = ipd)
# Plot the survival curves
p <- ggsurvplot(fit, data = ipd, pval = TRUE, conf.int = TRUE,
risk.table = TRUE, legend.labs = c("TCAR", "TFCAS"),
ggtheme = theme_minimal(), xlim = c(0, 36),
xlab = "Time in Months", break.x.by = 12, break.y.by =0.2,
palette=c("blue", "red"), conf.int.style = "step", conf.int.alpha=0,
title = "Low 2023 - 3-year Survival")
# Add the HR annotation
p$plot <- p$plot + annotate("text", x = 36, y = 0.1, label = hr_text, size = 5, hjust = 0)
# Print the plot
print(p)
# Plot the survival curves
p <- ggsurvplot(fit, data = ipd, pval = TRUE, conf.int = TRUE,
risk.table = TRUE, legend.labs = c("TCAR", "TFCAS"),
ggtheme = theme_minimal(), xlim = c(0, 36),
xlab = "Time in Months", break.x.by = 12, break.y.by =0.2,
palette=c("blue", "red"), conf.int.style = "step", conf.int.alpha=0,
title = "Low 2023 - 3-year Survival")
# Add the HR annotation
p$plot <- p$plot + annotate("text", x =12, y = 0.1, label = hr_text, size = 5, hjust = 0)
# Fit a Kaplan-Meier survival curve
fit <- survfit(Surv(ipd$time, ipd$status) ~ group, data = ipd)
# Plot the survival curves
p <- ggsurvplot(fit, data = ipd, pval = TRUE, conf.int = TRUE,
risk.table = TRUE, legend.labs = c("TCAR", "TFCAS"),
ggtheme = theme_minimal(), xlim = c(0, 36),
xlab = "Time in Months", break.x.by = 12, break.y.by =0.2,
palette=c("blue", "red"), conf.int.style = "step", conf.int.alpha=0,
title = "Low 2023 - 3-year Survival")
# Add the HR annotation
p$plot <- p$plot + annotate("text", x =12, y = 0.1, label = hr_text, size = 5, hjust = 0)
# Print the plot
print(p)
# Display the results
summary(cox_model)
# Read the CSV files with ; separator
control_raw <- read_delim("IPD/toby_surv_tfcas.csv", delim=";", locale = locale_settings)
treatment_raw <- read_delim("IPD/toby_surv_tcar.csv", delim=";", locale = locale_settings)
# Add column names in each dataset
colnames(control_raw) <- c("time", "survival")
colnames(treatment_raw) <- c("time", "survival")
# Replace commas with dots in every dataset
control_raw$time <- gsub(",", ".",control_raw$time)
control_raw$survival <- gsub(",", ".",control_raw$survival)
treatment_raw$time <- gsub(",", ".",treatment_raw$time)
treatment_raw$survival <- gsub(",", ".",treatment_raw$survival)
# Add a column to indicate the group
control_raw$group <- 2
treatment_raw$group <- 1
# Combine the data frames
df <- rbind(treatment_raw, control_raw)
# Format the numbers to have 10 decimal places
df$survival <- format(as.numeric(df$survival), nsmall = 10)
df$time <- format(as.numeric(df$time), nsmall = 10)
# Ensure all survival values are between 0 and 1
#df$survival <- pmin(df$survival, 1)
colnames(df) <- c("Time", "Survival probability","Treatment")
# Write the CSV file for the dataframe
write.csv(df, "IPD/toby_surv_df.csv", row.names = FALSE, quote = FALSE)
ipd <- read_csv("IPD/toby_surv_ipd.csv")
# Rename the columns
colnames(ipd) <- c("time", "status", "group")
# Fit the Cox proportional hazards model
cox_model <- coxph(Surv(time, status) ~ group, data = ipd)
hr <- summary(cox_model)$coefficients[1, "exp(coef)"]
hr_confint <- summary(cox_model)$conf.int[1, ]
hr_text <- paste0("HR: ", round(hr, 2), " (95% CI: ",
round(hr_confint["lower .95"], 2), "-",
round(hr_confint["upper .95"], 2), ")")
# Display the results
summary(cox_model)
######################### PRINT THE PLOT #######################################
# Fit a Kaplan-Meier survival curve
fit <- survfit(Surv(ipd$time, ipd$status) ~ group, data = ipd)
# Plot the survival curves
p <- ggsurvplot(fit, data = ipd, pval = TRUE, conf.int = TRUE,
risk.table = TRUE, legend.labs = c("TCAR", "TFCAS"),
ggtheme = theme_minimal(), xlim = c(0, 36),
xlab = "Time in Months", break.x.by = 12, break.y.by =0.2,
palette=c("blue", "red"), conf.int.style = "step", conf.int.alpha=0,
title = "Low 2023 - 3-year Survival")
# Add the HR annotation
p$plot <- p$plot + annotate("text", x =12, y = 0.1, label = hr_text, size = 5, hjust = 0)
# Print the plot
print(p)
# Fit a Kaplan-Meier survival curve
fit <- survfit(Surv(ipd$time, ipd$status) ~ group, data = ipd)
# Plot the survival curves
p <- ggsurvplot(fit, data = ipd, pval = TRUE, conf.int = TRUE,
risk.table = TRUE, legend.labs = c("TCAR", "TFCAS"),
ggtheme = theme_minimal(), xlim = c(0, 36),
xlab = "Time in Months", break.x.by = 12, break.y.by =0.2,
palette=c("blue", "red"), conf.int.style = "step", conf.int.alpha=0,
title = "Toby 2022 - 3-year Survival")
# Add the HR annotation
p$plot <- p$plot + annotate("text", x =12, y = 0.1, label = hr_text, size = 5, hjust = 0)
# Print the plot
print(p)
hr_data <- read_csv("survival.csv")
mhr <- metagen(data=hr_data, log(HR),lower=log(lower),upper=log(upper), sm="HR", studlab = study,
comb.fixed = FALSE, comb.random = TRUE,n.e,n.c)
forest(mhr,
studlab = TRUE,
comb.fixed = FALSE,
comb.random = TRUE,
test.overall.random = TRUE,
sortvar=study_data2$study,
leftcols = c("studlab","event.e","n.e","event.c","n.c", "effect.ci","w.random"),
leftlabs = c("Study", "Events","Total", "Events","Total", "HR [95% CI]", "Weight"),
rightcols = FALSE,
print.I2 = TRUE,
print.tau2 = TRUE,
print.stat.Z = TRUE,
hetstat = TRUE,
xlab = "Hazard Ratio",
label.left = "Favors TCAR",
label.right = "Favors TFCAS",
just = "center",
just.addcols = "left",
#xlim = c(0.01, 10),  # Set x-axis limits
#at = c(0.01, 0.1, 1, 10),
col.diamond = "blue", col.square = "black", col.square.lines = "blue")
mhr <- metagen(data=hr_data, log(HR),lower=log(lower),upper=log(upper), sm="HR", studlab = study,
comb.fixed = FALSE, comb.random = TRUE,n.e,n.c)
mhr <- metagen(data=hr_data, log(HR),lower=log(lower),upper=log(upper), sm="HR", studlab = study,
comb.fixed = FALSE, comb.random = TRUE)
forest(mhr,
studlab = TRUE,
comb.fixed = FALSE,
comb.random = TRUE,
test.overall.random = TRUE,
sortvar=study_data2$study,
leftcols = c("studlab","event.e","n.e","event.c","n.c", "effect.ci","w.random"),
leftlabs = c("Study", "Events","Total", "Events","Total", "HR [95% CI]", "Weight"),
rightcols = FALSE,
print.I2 = TRUE,
print.tau2 = TRUE,
print.stat.Z = TRUE,
hetstat = TRUE,
xlab = "Hazard Ratio",
label.left = "Favors TCAR",
label.right = "Favors TFCAS",
just = "center",
just.addcols = "left",
#xlim = c(0.01, 10),  # Set x-axis limits
#at = c(0.01, 0.1, 1, 10),
col.diamond = "blue", col.square = "black", col.square.lines = "blue")
forest(mhr,
studlab = TRUE,
comb.fixed = FALSE,
comb.random = TRUE,
test.overall.random = TRUE,
leftcols = c("studlab","event.e","n.e","event.c","n.c", "effect.ci","w.random"),
leftlabs = c("Study", "Events","Total", "Events","Total", "HR [95% CI]", "Weight"),
rightcols = FALSE,
print.I2 = TRUE,
print.tau2 = TRUE,
print.stat.Z = TRUE,
hetstat = TRUE,
xlab = "Hazard Ratio",
label.left = "Favors TCAR",
label.right = "Favors TFCAS",
just = "center",
just.addcols = "left",
#xlim = c(0.01, 10),  # Set x-axis limits
#at = c(0.01, 0.1, 1, 10),
col.diamond = "blue", col.square = "black", col.square.lines = "blue")
grid.text("TCAR x TFCAS - 3-year survival", .5, .9, gp=gpar(cex=2),just="center")
hr_data <- read_csv("survival.csv")
mhr <- metagen(data=hr_data, log(HR),lower=log(lower),upper=log(upper), sm="HR", studlab = study,
comb.fixed = FALSE, comb.random = TRUE)
forest(mhr,
studlab = TRUE,
comb.fixed = FALSE,
comb.random = TRUE,
test.overall.random = TRUE,
leftcols = c("studlab","event.e","n.e","event.c","n.c", "effect.ci","w.random"),
leftlabs = c("Study", "Events","Total", "Events","Total", "HR [95% CI]", "Weight"),
rightcols = FALSE,
print.I2 = TRUE,
print.tau2 = TRUE,
print.stat.Z = TRUE,
hetstat = TRUE,
xlab = "Hazard Ratio",
label.left = "Favors TCAR",
label.right = "Favors TFCAS",
just = "center",
just.addcols = "left",
#xlim = c(0.01, 10),  # Set x-axis limits
#at = c(0.01, 0.1, 1, 10),
col.diamond = "blue", col.square = "black", col.square.lines = "blue")
grid.text("TCAR x TFCAS - 3-year survival", .5, .9, gp=gpar(cex=2),just="center")
# Read the CSV files with ; separator
control_raw <- read_delim("IPD/low_sf_tfcas.csv", delim=";", locale = locale_settings)
treatment_raw <- read_delim("IPD/low_sf_tcar.csv", delim=";", locale = locale_settings)
# Add column names in each dataset
colnames(control_raw) <- c("time", "survival")
colnames(treatment_raw) <- c("time", "survival")
# Replace commas with dots in every dataset
control_raw$time <- gsub(",", ".",control_raw$time)
control_raw$survival <- gsub(",", ".",control_raw$survival)
treatment_raw$time <- gsub(",", ".",treatment_raw$time)
treatment_raw$survival <- gsub(",", ".",treatment_raw$survival)
# Add a column to indicate the group
control_raw$group <- 2
treatment_raw$group <- 1
# Combine the data frames
df <- rbind(treatment_raw, control_raw)
# Format the numbers to have 10 decimal places
df$survival <- format(as.numeric(df$survival), nsmall = 10)
df$time <- format(as.numeric(df$time), nsmall = 10)
# Ensure all survival values are between 0 and 1
#df$survival <- pmin(df$survival, 1)
colnames(df) <- c("Time", "Survival probability","Treatment")
# Write the CSV file for the dataframe
write.csv(df, "IPD/low_sf_df.csv", row.names = FALSE, quote = FALSE)
# Submit data to shiny app, then get the CSV, clean it in Notepad++, then read it
ipd <- read_csv("IPD/low_sf_ipd.csv")
# Rename the columns
colnames(ipd) <- c("time", "status", "group")
# Fit the Cox proportional hazards model
cox_model <- coxph(Surv(time, status) ~ group, data = ipd)
hr <- summary(cox_model)$coefficients[1, "exp(coef)"]
hr_confint <- summary(cox_model)$conf.int[1, ]
hr_text <- paste0("HR: ", round(hr, 2), " (95% CI: ",
round(hr_confint["lower .95"], 2), "-",
round(hr_confint["upper .95"], 2), ")")
# Display the results
summary(cox_model)
######################### PRINT THE PLOT #######################################
# Fit a Kaplan-Meier survival curve
fit <- survfit(Surv(ipd$time, ipd$status) ~ group, data = ipd)
# Plot the survival curves
p <- ggsurvplot(fit, data = ipd, pval = TRUE, conf.int = TRUE,
risk.table = TRUE, legend.labs = c("TCAR", "TFCAS"),
ggtheme = theme_minimal(), xlim = c(0, 36),
xlab = "Time in Months", break.x.by = 12, break.y.by =0.2,
palette=c("blue", "red"), conf.int.style = "step", conf.int.alpha=0,
title = "Low 2023 - 3-year Freedom of Stroke")
# Add the HR annotation
p$plot <- p$plot + annotate("text", x =12, y = 0.1, label = hr_text, size = 5, hjust = 0)
# Print the plot
print(p)
# Read the CSV files with ; separator
treatment_raw <- read_delim("IPD/olvera_sf_tcar.csv", delim=";", locale = locale_settings)
control_raw <- read_delim("IPD/olvera_sf_tfcas.csv", delim=";", locale = locale_settings)
# Add column names in each dataset
colnames(control_raw) <- c("time", "survival")
colnames(treatment_raw) <- c("time", "survival")
# Replace commas with dots in every dataset
control_raw$time <- gsub(",", ".",control_raw$time)
control_raw$survival <- gsub(",", ".",control_raw$survival)
treatment_raw$time <- gsub(",", ".",treatment_raw$time)
treatment_raw$survival <- gsub(",", ".",treatment_raw$survival)
# Add a column to indicate the group
control_raw$group <- 2
treatment_raw$group <- 1
# Combine the data frames
df <- rbind(treatment_raw, control_raw)
# Format the numbers to have 10 decimal places
df$survival <- format(as.numeric(df$survival), nsmall = 10)
df$time <- format(as.numeric(df$time), nsmall = 10)
# Ensure all survival values are between 0 and 1
#df$survival <- pmin(df$survival, 1)
colnames(df) <- c("Time", "Survival probability","Treatment")
# Write the CSV file for the dataframe
write.csv(df, "IPD/olvera_sf_df.csv", row.names = FALSE, quote = FALSE)
# Submit data to shiny app, then get the CSV, clean it in Notepad++, then read it
ipd <- read_csv("IPD/olvera_sf_ipd.csv")
# Rename the columns
colnames(ipd) <- c("time", "status", "group")
# Fit the Cox proportional hazards model
cox_model <- coxph(Surv(time, status) ~ group, data = ipd)
hr <- summary(cox_model)$coefficients[1, "exp(coef)"]
hr_confint <- summary(cox_model)$conf.int[1, ]
hr_text <- paste0("HR: ", round(hr, 2), " (95% CI: ",
round(hr_confint["lower .95"], 2), "-",
round(hr_confint["upper .95"], 2), ")")
# Display the results
summary(cox_model)
######################### PRINT THE PLOT #######################################
# Fit a Kaplan-Meier survival curve
fit <- survfit(Surv(ipd$time, ipd$status) ~ group, data = ipd)
# Plot the survival curves
p <- ggsurvplot(fit, data = ipd, pval = TRUE, conf.int = TRUE,
risk.table = TRUE, legend.labs = c("TCAR", "TFCAS"),
ggtheme = theme_minimal(), xlim = c(0, 36),
xlab = "Time in Months", break.x.by = 12, break.y.by =0.2,
palette=c("blue", "red"), conf.int.style = "step", conf.int.alpha=0,
title = "Olvera 2022 - 3-year Freedom of Stroke")
# Add the HR annotation
p$plot <- p$plot + annotate("text", x =12, y = 0.1, label = hr_text, size = 5, hjust = 0)
# Print the plot
print(p)
ipd <- read_csv("IPD/low_sf_ipd.csv")
# Rename the columns
colnames(ipd) <- c("time", "status", "group")
# Fit the Cox proportional hazards model
cox_model <- coxph(Surv(time, status) ~ group, data = ipd)
hr <- summary(cox_model)$coefficients[1, "exp(coef)"]
hr_confint <- summary(cox_model)$conf.int[1, ]
hr_text <- paste0("HR: ", round(hr, 2), " (95% CI: ",
round(hr_confint["lower .95"], 2), "-",
round(hr_confint["upper .95"], 2), ")")
# Display the results
summary(cox_model)
hr_data <- read_csv("survival.csv")
mhr <- metagen(data=hr_data, log(HR),lower=log(lower),upper=log(upper), sm="HR", studlab = study,
comb.fixed = FALSE, comb.random = TRUE)
hr_data <- read_csv("survival.csv")
mhr <- metagen(data=hr_data, log(HR),lower=log(lower),upper=log(upper), sm="HR", studlab = study,
comb.fixed = FALSE, comb.random = TRUE)
forest(mhr,
studlab = TRUE,
comb.fixed = FALSE,
comb.random = TRUE,
test.overall.random = TRUE,
leftcols = c("studlab","event.e","n.e","event.c","n.c", "effect.ci","w.random"),
leftlabs = c("Study", "Events","Total", "Events","Total", "HR [95% CI]", "Weight"),
rightcols = FALSE,
print.I2 = TRUE,
print.tau2 = TRUE,
print.stat.Z = TRUE,
hetstat = TRUE,
xlab = "Hazard Ratio",
label.left = "Favors TFCAS",
label.right = "Favors TCAR",
just = "center",
just.addcols = "left",
#xlim = c(0.01, 10),  # Set x-axis limits
#at = c(0.01, 0.1, 1, 10),
col.diamond = "blue", col.square = "black", col.square.lines = "blue")
grid.text("TCAR x TFCAS - 3-year survival", .5, .9, gp=gpar(cex=2),just="center")
hr_data <- read_csv("sf.csv")
mhr <- metagen(data=hr_data, log(HR),lower=log(lower),upper=log(upper), sm="HR", studlab = study,
comb.fixed = FALSE, comb.random = TRUE)
forest(mhr,
studlab = TRUE,
comb.fixed = FALSE,
comb.random = TRUE,
test.overall.random = TRUE,
leftcols = c("studlab","event.e","n.e","event.c","n.c", "effect.ci","w.random"),
leftlabs = c("Study", "Events","Total", "Events","Total", "HR [95% CI]", "Weight"),
rightcols = FALSE,
print.I2 = TRUE,
print.tau2 = TRUE,
print.stat.Z = TRUE,
hetstat = TRUE,
xlab = "Hazard Ratio",
label.left = "Favors TFCAS",
label.right = "Favors TCAR",
just = "center",
just.addcols = "left",
#xlim = c(0.01, 10),  # Set x-axis limits
#at = c(0.01, 0.1, 1, 10),
col.diamond = "blue", col.square = "black", col.square.lines = "blue")
grid.text("TCAR x TFCAS - 3-year Freedom of Stroke", .5, .9, gp=gpar(cex=2),just="center")
required_packages <- c("readxl", "metafor", "dplyr", "tidyr", "ggplot2", "purrr", "knitr", "gridExtra")
for (package in required_packages){
if (!requireNamespace(package, quietly = TRUE)){
install.packages(package)
}
}
library(readxl)      # For reading Excel files
library(metafor)     # For meta-analysis and meta-regression
library(dplyr)       # For data manipulation
library(tidyr)       # For data reshaping
library(ggplot2)     # For visualization
library(purrr)       # For functional programming
library(knitr)       # For nice tables
library(gridExtra)
setwd("/Users/pedroecarneiro/Library/Mobile Documents/com~apple~CloudDocs/Arquivos G15/Documentos/META ANALYSIS/Vasc - TCAR vs TFCAS/Meta Regression")
